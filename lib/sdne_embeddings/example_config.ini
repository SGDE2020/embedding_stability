; Examplary config file

[Graph_Data]
; Input data file in .mat format or as edgelist .edgelist or .txt format.
; The edgelist format expects the fist line to contain the number of
; nodes and edges, followed by a line for each edge. Sample graph with
; three nodes and two edges:
; 3 2
; 0 1
; 1 2
train_graph_file = <PATH_TO_DATASET_FILE>

[Output]
; Display results for all <display> results
display = 1
; Name of the graph (used for storing results)
graph_name = <GRAPH_NAME>
; Number of embeddings that will be created
num_embeddings = <NUMBER_OF_EMBEDDINGS> ; e.g. 30

[Model_Setup]
; Set random seed
; Embeddings created within one execution will differ
; Embeddings created by multiple executions (assuming parameters remain
; the same) will be equal
seed = <RANDOM_SEED> ; e.g. 1
; Structure of the neural network. Leading -1 will be replaced by number
; of vertices. Last layer size determines the embedding size
struct = -1[,<HIDDEN_LAYERS>],<OUTPUT_DIMENSION> ; e.g. -1,700,128

; Loss function parameters (s. paper for details)
; Loss := gamma * L1 + alpha * L2 + reg * regularTerm
alpha = 100
gamma = 1
reg = 1
; Weight balanced value for non-zero element reconstruction
beta = 10

; Batch size considered in each iteration
; Try bigger sizes if working on GPU
batch_size = 16

; Epochs for each embedding
epochs_limit = 50

; Regular learning rate
learning_rate = 0.01

; Pre-training with Deep Belief network
dbn_init = False ; If True, other params will be considered
dbn_epochs = 5
dbn_batch_size = 32
dbn_learning_rate = 0.1

; Negative sampling
ng_sample_ratio = 0.0

